package gg.hcfactions.cx.modules.player.exploit;

import gg.hcfactions.cx.modules.ICXModule;
import gg.hcfactions.libs.bukkit.AresPlugin;
import lombok.Getter;
import lombok.Setter;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.potion.PotionEffectType;

public final class ExploitPatchModule implements ICXModule, Listener {
    @Getter public final AresPlugin plugin;
    @Getter public final String key;
    @Getter @Setter public boolean enabled;

    private boolean disablePearlClipping;
    private boolean disableElytraBouncing;
    private int elytraBouncingHeight;

    public ExploitPatchModule(AresPlugin plugin) {
        this.plugin = plugin;
        this.key = "exploit.";
    }

    @Override
    public void onEnable() {
        loadConfig();

        if (!isEnabled()) {
            return;
        }

        plugin.registerListener(this);
    }

    @Override
    public void onDisable() {}

    @Override
    public void onReload() {
        loadConfig();
    }

    private void loadConfig() {
        final YamlConfiguration conf = plugin.loadConfiguration("commandx");

        enabled = conf.getBoolean(key + "enabled");
        disablePearlClipping = conf.getBoolean(key + "disable_pearl_clipping");
        disableElytraBouncing = conf.getBoolean(key + "disable_elytra_bouncing");
        elytraBouncingHeight = conf.getInt(key + "elytra_bouncing_height");
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        if (!isEnabled() || !disablePearlClipping) {
            return;
        }

        final Action action = event.getAction();
        final ItemStack item = event.getItem();

        if (item == null || !item.getType().equals(Material.ENDER_PEARL)) {
            return;
        }

        if (action.equals(Action.RIGHT_CLICK_AIR)) {
            return;
        }

        final Block clickedBlock = event.getClickedBlock();

        if (clickedBlock == null || !(
                clickedBlock.getType().equals(Material.STRING) ||
                clickedBlock.getType().name().contains("FENCE") ||
                clickedBlock.getType().name().contains("PANE") ||
                clickedBlock.getType().name().contains("GLASS_PANE") ||
                clickedBlock.getType().name().contains("_WALL") ||
                clickedBlock.getType().name().contains("FENCE_GATE"))) {
            return;
        }

        event.setCancelled(true);
    }

    @EventHandler
    public void onPlayerTeleport(PlayerTeleportEvent event) {
        if (!isEnabled() || !disablePearlClipping) {
            return;
        }

        if (!event.getCause().equals(PlayerTeleportEvent.TeleportCause.ENDER_PEARL)) {
            return;
        }

        if (event.getTo() == null) {
            return;
        }

        final String toBlockName = event.getTo().getBlock().getType().name();

        if (!(
                toBlockName.contains("FENCE") ||
                toBlockName.contains("PANE") ||
                toBlockName.contains("GLASS_PANE"))) {
            return;
        }

        final Player player = event.getPlayer();
        final double x = event.getTo().getBlockX() + 0.5;
        final double z = event.getTo().getBlockZ() + 0.5;
        final float yaw = event.getTo().getYaw();
        final float pitch = event.getTo().getPitch();
        final double y = (player.hasPotionEffect(PotionEffectType.LEVITATION) && event.getTo().getY() >= event.getFrom().getY()) ? event.getTo().getBlockY() - 1.0 : event.getTo().getBlockY();
        final World world = event.getTo().getWorld();

        event.setTo(new Location(world, x, y, z, yaw, pitch));
    }

    @EventHandler
    public void onPlayerToggleFlight(EntityToggleGlideEvent event) {
        if (!isEnabled() || !disableElytraBouncing || event.isCancelled()) {
            return;
        }

        if (!(event.getEntity() instanceof final Player player)) {
            return;
        }

        if (!event.isGliding()) {
            return;
        }

        if (!isInAir(player, elytraBouncingHeight)) {
            event.setCancelled(true);
        }
    }

    private boolean isInAir(Player player, int dist) {
        final Location location = player.getLocation();

        for (int i = 0; i < dist; i++) {
            final Location newLocation = new Location(location.getWorld(), location.getBlockX(), location.getBlockY() - i, location.getBlockZ());

            if (newLocation.getBlock().getType().equals(Material.AIR) || !newLocation.getBlock().getType().isSolid()) {
                continue;
            }

            return false;
        }

        return true;
    }
}
